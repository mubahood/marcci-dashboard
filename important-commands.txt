lsphp artisan make:component Alert --inline

php artisan migrate

php artisan make:migration create_crops_table
php artisan make:migration create_course_categories_table
php artisan make:migration create_course_chapters_table
php artisan make:migration create_course_topics_table
php artisan make:migration create_participants_table
php artisan make:migration create_post_categories_table
php artisan make:migration create_news_posts_table
php artisan make:migration create_eevnts_table
php artisan make:migration create_event_bookings_table
php artisan make:migration create_event_tickets_table
php artisan make:migration create_event_speakers_table
php artisan make:migration create_jobs_table
php artisan make:migration create_admin_roles_table
php artisan make:migration create_service_providers_table 
php artisan make:migration create_associations_table 
php artisan make:migration create_groups_table 
php artisan make:migration create_people_table 
php artisan make:migration create_disabilities_table 
php artisan make:migration create_institutions_table 
php artisan make:migration create_counselling_centres_table 
php artisan make:migration create_counselling_centres_table 
php artisan make:migration create_job_applications_table 
php artisan make:migration create_products_table 
php artisan make:migration create_product_orders_table 
php artisan make:migration create_crop_protocols_table 
php artisan make:migration create_garden_table 
php artisan make:migration create_garden_activities_table 

Encore\Admin\Auth\Database\Administrator::class,
php artisan admin:make FormSr4Controller --model=App\FormSr4
php artisan admin:make ParticipantController --model=App\\Participant

php artisan admin:controller --model=App\FormSr4
php artisan admin:make ProductionRecordController --model=App\ProductionRecord
php artisan admin:make CourseController --model=App\\Models\\Course
php artisan admin:make ParticipantController --model=App\\Models\\Participant
php artisan admin:make MembersController --model=App\Models\User
php artisan admin:make PostCategoryController --model=App\Models\PostCategory
php artisan admin:make NewsPostController --model=App\Models\NewsPost
php artisan admin:make EventController --model=App\Models\Event
php artisan admin:make EventBookingController --model=App\Models\EventBooking
php artisan admin:make ServiceProviderController --model=App\Models\ServiceProvider
php artisan admin:make AssociationController --model=App\Models\Association
php artisan admin:make GroupController --model=App\Models\Group
php artisan admin:make PersonController --model=App\Models\Person
php artisan admin:make DisabilityController --model=App\Models\Disability
php artisan admin:make InstitutionController --model=App\Models\Institution
php artisan admin:make CounsellingCentreController --model=App\Models\CounsellingCentre
php artisan admin:make JobController --model=App\Models\Job
php artisan admin:make JobApplicationController --model=App\Models\JobApplication
php artisan admin:make ProductController --model=App\Models\Product
php artisan admin:make ProductOrderController --model=App\Models\ProductOrder
php artisan admin:make CropController --model=App\Models\Crop
php artisan admin:make CropProtocolController --model=App\Models\CropProtocol
php artisan admin:make GardenController --model=App\Models\Garden
php artisan admin:make RegistrationController --model=App\Models\Registration

 --model=app\


php artisan make:factory TeacherFactory


php artisan make:model CropProtocol
php artisan make:model MyClass
php artisan make:model Student
php artisan make:model Teacher
php artisan make:model Subject
php artisan make:model Exam
php artisan make:model GeneralExam
php artisan make:model CourseCategory
php artisan make:model Course
php artisan make:model CourseChapter
php artisan make:model CourseTopic
php artisan make:model Utils
php artisan make:model TrafficRecord
php artisan make:model Participant
php artisan make:model Campus
php artisan make:model UserHasProgram
php artisan make:model Users
php artisan make:model User
php artisan make:model PostCategory
php artisan make:model NewsPost
php artisan make:model Event
php artisan make:model EventTicket
php artisan make:model EventBooking
php artisan make:model EventSpeaker
php artisan make:model AdminRoleUser
php artisan make:model ServiceProvider
php artisan make:model Association
php artisan make:model Group
php artisan make:model Person
php artisan make:model Disability
php artisan make:model Institution
php artisan make:model CounsellingCentre
php artisan make:model Job
php artisan make:model JobApplication
php artisan make:model Product
php artisan make:model ProductOrder
php artisan make:model Crop
php artisan make:model Garden
php artisan make:model GardenActivity



//for future use 
     
// $form->saving(function (Form $form) {
//     // Use request() to get the submitted value
//     $audioInput = request('audioInput');
//     error_log('audioInput: ' . $audioInput);

//     if ($audioInput) {
//         $audioExtension = pathinfo($audioInput, PATHINFO_EXTENSION);
//         $audioName = 'audio_' . time() . '.' . $audioExtension;
//         $audioBinary = base64_decode(str_replace('data:audio/' . $audioExtension . ';base64,', '', $audioInput));

//         // Save the file to storage using UploadedFile
//         $tempFilePath = tempnam(sys_get_temp_dir(), 'audio_temp_');
//         file_put_contents($tempFilePath, $audioBinary);
        
//         $uploadedFile = new UploadedFile(
//             $tempFilePath,
//             $audioName,
//             'audio/' . $audioExtension,
//             null,
//             true // Set to true to enable "test" mode
//         );

//         Storage::disk('public')->put($audioName, $uploadedFile->getContent());

//         // Update the form field value
//         $form->audio = $audioName;

//         // Delete the temporary file
//         unlink($tempFilePath);
//     }
// });
        
       

       

      
    //     $form->html('<button type="button" id="startRecordingButton">Start Recording</button>');
    //     $form->html('<button type="button" id="stopRecordingButton" style="display: none;">Stop Recording</button>');
    //     $form->html('<audio id="audioPlayer" controls></audio>');
    //     $form->html('<input type="hidden" id="audioInput" name="audioInput">');
         $form->file('audio', __('Audio Input'));
    //     $form->html('<script>
    //     var startRecordingButton = document.getElementById("startRecordingButton");
    //     var stopRecordingButton = document.getElementById("stopRecordingButton");
    //     var audioPlayer = document.getElementById("audioPlayer");
    //     var audioInput = document.getElementById("audioInput");
    //     var mediaRecorder;
    //     var audioChunks = [];
        
    //     startRecordingButton.addEventListener("click", startRecording);
    //     stopRecordingButton.addEventListener("click", stopRecording);
        
    //     function startRecording() {
    //         navigator.mediaDevices.getUserMedia({ audio: true })
    //             .then(function (stream) {
    //                 mediaRecorder = new MediaRecorder(stream);
        
    //                 mediaRecorder.ondataavailable = function (event) {
    //                     if (event.data.size > 0) {
    //                         audioChunks.push(event.data);
    //                     }
    //                 };
        
    //                 mediaRecorder.onstop = function () {
    //                     var audioBlob = new Blob(audioChunks, { type: "audio/wav" });
        
    //                     // Convert the Blob to an audio file
    //                     const audioUrl = URL.createObjectURL(audioBlob);
        
    //                     // Use the audioUrl for playback or other purposes if needed
    //                     audioPlayer.src = audioUrl;
        
    //                     // Create FormData and append the audioBlob
    //                     var formData = new FormData();
    //                     formData.append("audioInput", audioBlob, "audio.wav");
        
    //                     // Update the value of audioInput
    //                     audioInput.value = "audio.wav";
    //                 };
        
    //                 mediaRecorder.start();
    //                 startRecordingButton.style.display = "none";
    //                 stopRecordingButton.style.display = "block";
    //             })
    //             .catch(function (error) {
    //                 console.error("Error accessing microphone:", error);
    //             });
    //     }
        
    //     function stopRecording() {
    //         mediaRecorder.stop();
    //         startRecordingButton.style.display = "block";
    //         stopRecordingButton.style.display = "none";
    //     }
        
    // </script>');
    

